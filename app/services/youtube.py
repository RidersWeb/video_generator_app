import json, os, yt_dlp, time
from fastapi import APIRouter, WebSocket, WebSocketDisconnect

from fastapi import FastAPI, Request, APIRouter, Query
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, StreamingResponse
from fastapi.responses import FileResponse

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, HttpUrl, validator, constr

from fake_useragent import UserAgent


from uuid import uuid4
from pathlib import Path


proxy = ""

ua = UserAgent()
headers = {
    'User-Agent': ua.chrome  # –∏–ª–∏ ua.random, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞–Ω–¥–æ–º–Ω–æ –∏–∑ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
}

DOWNLOAD_FOLDER = "app/downloads"
Path(DOWNLOAD_FOLDER).mkdir(exist_ok=True)

router = APIRouter()

templates = Jinja2Templates(directory="app/templates")
router.mount("/static", StaticFiles(directory="app/static"), name="static")


# üëá –ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JSON —Å –∫–ª–∏–µ–Ω—Ç–∞
class VideoRequest(BaseModel):
    video_id: str

# üëá POST-–∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç JSON
@router.post("/youtube/embed", response_class=HTMLResponse)
async def embed_youtube(request: Request, data: VideoRequest):
    print('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã' + data.video_id)
    video_id = data.video_id
    url = f"https://www.youtube.com/watch?v={video_id}"
    info = extract_video_info(url)

    formats = info.get("formats")
    
    print('–û—Ç–ø—Ä–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞')
    return templates.TemplateResponse("youtube.html", {
        "request": request,
        "video_id": video_id,
        "title": info.get("title"),
        "subscriber_count": info.get("uploader_subscriber_count"),
        "uploader": info.get("uploader"),
        "uploader_url": info.get("uploader_url"),
        "like_count": info.get("like_count"),
        "dislike_count": info.get("dislike_count"),
        "view_count": info.get("view_count"),
        "comment_count": info.get("comment_count"),
        "thumbnail": info.get("thumbnail"),
        "webpage_url": info.get("webpage_url"),
        "duration": info.get("duration"),
        "description": info.get("description"),
        "upload_date": info.get("upload_date"),
        # "video_url": video_url,
        # "audio_url": audio_url
    })



@router.get("/youtube/download")
async def download_youtube(
    video_url: str,
    media_type: str = "video",
    retry: int = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
):
    ydl_opts = {
        "outtmpl": f"{DOWNLOAD_FOLDER}/%(title)s.%(ext)s",
        "retries": retry,
        "fragment_retries": retry,
        "skip_unavailable_fragments": True,
        "http_chunk_size": 1048576 * 5,  # 5MB chunks –≤–º–µ—Å—Ç–æ 1MB
        "concurrent_fragment_downloads": 4,  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        "retries": 10,
        "fragment_retries": 10,
        "extractor_args": {
            "youtube": {
                "skip": ["hls", "dash"]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            }
        },
        "proxy": proxy,  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
        "http_headers": headers,   # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—Ä–æ–∫—Å–∏
        "socket_timeout": 30,
        "noprogress": True
    }

    if media_type == "audio":
        ydl_opts.update({
            "format": "bestaudio/best",
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
            }],
        })
    else:
        ydl_opts.update({
            "format": "bestvideo[height<=720]+bestaudio/best",
        })

    try:
        for attempt in range(retry):
            try:
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(video_url, download=True)
                    filename = ydl.prepare_filename(info)
                    
                    if media_type == "audio":
                        filename = filename.split('.')[0] + '.mp3'

                    if not os.path.exists(filename):
                        continue  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É

                    return FileResponse(
                        filename,
                        media_type="audio/mpeg" if media_type == "audio" else "video/mp4",
                        filename=os.path.basename(filename)
                    )

            except (yt_dlp.utils.DownloadError, ConnectionError) as e:
                if attempt == retry - 1:
                    raise
                time.sleep(5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

        raise HTTPException(400, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")

    except Exception as e:
        raise HTTPException(400, detail=f"–û—à–∏–±–∫–∞: {str(e)}")



# üëá –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ yt_dlp
def extract_video_info(url: str) -> dict:
    ydl_opts = {
        "quiet": True,
        "skip_download": True,
        "extract_flat": False,
        "proxy": proxy,  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
        "http_headers": headers,  # ‚Üê –¥–æ–±–∞–≤–ª—è–µ–º User-Agent
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        return info


def download_media(url: str, media_type: str = "video"):
    ydl_opts = {
        "quiet": True,
        "no_warnings": True,
    }

    if media_type == "audio":
        ydl_opts.update({
            "format": "bestaudio/best",
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }],
            "outtmpl": "%(title)s.%(ext)s",
        })
    else:  # video
        ydl_opts.update({
            "format": "bestvideo+bestaudio/best",
            "outtmpl": "%(title)s.%(ext)s",
        })

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            
            if media_type == "audio":
                filename = filename.rsplit(".", 1)[0] + ".mp3"
            
            return filename
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.post("/download")
async def download(url: str, media_type: str = "video"):
    try:
        filename = download_media(url, media_type)
        return {"status": "success", "filename": filename}
    except Exception as e:
        return {"status": "error", "message": str(e)}